#!/bin/bash

FILE=config.mk

usage()
{
	echo "Usage:"
	echo "sys-build --arch <arch> --abi <abi> [opt...]"
	echo "   Usage Option:"
	echo "     --arch           arm|arm64|x86|x86_64"
	echo "     --abi            armeabi|armea-v7a|arm64-v8a|x86|x64"
	echo "     --plat           android|other"
	echo "     --board          board name"
	echo "     --aliasboard     alias board name"
	echo "     --vendor         vendor name"
	echo "     --output         Specify out put direcotry, default ./out"
	echo "     --printlog       1 | 0"
	echo "     --modules        Specify should be compiled module"
	echo "     --sysroot        Specify sysroot"
	echo "     --toolchain      toolchain prefix"
	echo "     --buildscript    Build script file"
	echo "     --stl            Append stl support"
	echo "     --releasepath    Setup release direcotry, default ./out/release"
	echo "     --optmized       debug|release"
	echo "     --custom         Try include makefile file"
}

application_vars=( APP_BUILD_SCRIPT \
	               APP_OPTIM \
				   APP_STL \
				   APP_OUTPUT_DIR \
				   APP_DEBUG_MODULES \
				   NDK_LOG \
				   APP_MODULES \
				   APP_ARCH \
				   APP_ABI \
				   APP_PLATFORM \
				   APP_BOARD \
				   APP_ALIAS_BOARD \
				   APP_TOOLCHAIN \
				   APP_TOOLCHAIN_SYSROOT \
				   APP_RELEASE_DIR \
				   APP_USER_CONFIG)

load_default_value_for_vars()
{
	 APP_BUILD_SCRIPT="\$(APP_PROJECT_PATH)/make.mk"
	 APP_OPTIM=release
	 APP_STL="\$(empty)"
	 APP_OUTPUT_DIR=out
	 APP_DEBUG_MODULES="\$(empty)"
	 NDK_LOG="\$(empty)"
	 APP_MODULES="\$(empty)"
	 APP_ARCH=x86_64
	 APP_ABI=x86_64
	 APP_PLATFORM=x86_64
	 APP_BOARD=unknow
	 APP_ALIAS_BOARD=unknow
	 APP_TOOLCHAIN=x86_64-linux-gnu-
	 APP_TOOLCHAIN_SYSROOT="\$(empty)"
	 APP_RELEASE_DIR=out/release
	 APP_USER_CONFIG="\$(empty)"
}

load_notes_for_vars()
{

NOTES_VERSION="
#=================================Sys-build=================================#
# Version: 1.0.0.`git log -1 |grep commit |awk '{print $2}' |cut -b 1-6`
# Author:  lichao@snailgame.net
# Date:    `date '+%Y-%m-%d %H:%M:%S'`
#===========================================================================#"

NOTES_APP_BUILD_SCRIPT="
#   To point a make.mk scritp, it's will be contains by sys-build at first time.
# if the variable undefine then using \$(APP_PROJECT_PATH)/make.mk as default."

NOTES_APP_OPTIM="
#   The option description that library or binary version is 'release' or 'debug'
# mode, the debug mode should be with -O0 -UNDEBUG options.
#   It is must be either debug or release."

NOTES_APP_STL="
#   The variable description this code project whether append STL module, these
# modules by sysbuild contains in \$(SYSBUILD_ROOT)/sources drectory. you can 
# refer thes modules by LOCAL_STATIC_LIBRARIES or LOCAL_SHARED_LIBRARIES if
# you already append these."

NOTES_APP_OUTPUT_DIR="
#   The variable declare the temporary file and target file generate drecotry,
# and normal is out/."

NOTES_APP_DEBUG_MODULES="
#   Enable or disable sysbuild log print, either '1' or '\$(empty)', 1--enable
# \$(empty)--disable."

NOTES_NDK_LOG="
#   Define NDK_LOG=1 in your environment or runing 'make NDK_LOG=1' to display 
# log traces when using the build scripts. See also the definition of 
# ndk_log below."

NOTES_APP_MODULES="
# Declare only by compile modules, if it's empty then compile all modules.
# For example:
# APP_MODULES := libgnu_stl libstl, or using command option
# 'sys-build --modules \"libgnu_stl libstl\" [options ...]'"

NOTES_APP_ARCH="
#   Declare current architecture one of the arm | arm64 | x86 | x86_64, the value
# must not be empty."

NOTES_APP_ABI="
#   Declare current ABI(Application binary interface) one of the armeabi | 
# armeabi-v7a | arm64-v8a | x86 | x86_64."

NOTES_APP_PLATFORM="
#   Declare current platform, the current only supporte 'android', you can custom
# it if you are like.
# If the variable not empty, sysbuild should be include 
# \$(SYSBUILD_ROOT)/configs/\$(APP_PLATFORM).mk to build system scripts."

NOTES_APP_BOARD="
# Declare current board name, only have one word."

NOTES_APP_ALIAS_BOARD="
# Declare board alias, not a must, only have one word."

NOTES_APP_TOOLCHAIN="
#   The variable must not be empty, it is declare current cross_compile prefix.
# For example:
#   APP_TOOLCHAIN := /opt/arm-linux-, or using the command option:
#   'sysbuild --toolchain /opt/arm-linux-'"


NOTES_APP_TOOLCHAIN_SYSROOT="
#   The variable declare toolchain's --sysroot option, in ordinary not declare
# it, but if you are to use the android-ndk toolchain then you are maby specify
# it, the value look the same \$(NDK_ROOT)/platforms/android-<sdk>/arch-<arch>"

NOTES_APP_RELEASE_DIR="
#   Declare the target library or bilary or third_part_binary releaase path, for
# example:
#  APP_RELEASE_DIR := /opt/version/release;/tmp/backup, or using command option
# 'sys-build --releasepath \"/opt/version/release;/tmp/backup\"'"

NOTES_APP_USER_CONFIG="
#   Declare the build system will be include makefile file, if it's avalid then 
# the to point's file should be include at config.mk by contains after, after
# the all make.mk can to refer these variable that by define in the config.mk
# or \$(APP_USER_CONFIG).
#   Special, the config.mk and \$(APP_USER_CONFIG) should be depended all modules."
}

get_notes_for_var()
{
	D="string=\$NOTES_$1"
	eval $D
	ret="$string"
}

write_application()
{
 get_notes_for_var "VERSION"
 echo "Create Makefile..."
 echo "$ret"
 echo "$ret" > $1
 for var in ${application_vars[*]}
 do
	 get_notes_for_var "${var}"
	 echo  "$ret" >> $1
	 D="v=\$${var}"
	 eval $D
	 echo "${var} := ${v}"
	 echo "${var} := ${v}" >> $1
 done
 echo "=========================================================================="
 echo "Configure done."
 return 0
}

load_notes_for_vars
load_default_value_for_vars 

#TEMP=`getopt -- --long arch:,abi: -- "$@" 2>/dev/null`

args=arch:,abi:,plat:,board:,aliasboard:,vendor:,output:,printlog:,modules:,sysroot:,toolchain:,buildscript:,stl:,releasepath:,optmized:,custom:
TEMP=`getopt -- --long ${args} -- "$@" 2>/dev/null`

[ $? != 0 ] && echo -e "\033[31mERROR: unknown argument! \033[0m\n" && usage && exit 1

eval set -- "$TEMP"

while :
do
	[ -z "$1" ] && break;
	case "$1" in
		--arch)
			APP_ARCH=$2;shift 2
			;;
		--abi)
			APP_ABI=$2;shift 2
			;;
		--plat)
			APP_PLATFORM=$2; shift 2
			;;
		--board)
			APP_BOARD=$2; shift 2
			;;
		--aliasboard)
			APP_ALIAS_BOARD=$2; shift 2
			;;
		--vendor)
			APP_VENDOR=$2; shift 2
			;;
		--output)
			APP_OUTPUT_DIR=$2; shift 2
			;;
		--printlog)
			NDK_LOG=$2; APP_DEBUG_MODULES=$2; shift 2
			;;
		--modules)
			APP_MODULES=$2; shift 2
			;;
		--sysroot)
			APP_TOOLCHAIN_SYSROOT=$2; shift 2
			;;
		--toolchain)
			APP_TOOLCHAIN=$2; shift 2
			;;
		--buildscript)
			APP_BUILD_SCRIPT=$2; shift 2
			;;
		--stl)
			APP_STL=$2; shift 2
			;;
		--releasepath)
			APP_RELEASE_DIR=$2; shift 2
			;;
		--optmized)
			APP_OPTIM=$2; shift 2
			;;
		--custom)
			APP_USER_CONFIG=$2; shift 2
			;;
		--)
			shift
			;;
		${args})
			shift
			;;
		*)
			echo "Bad parameters ($1)" && usage && exit 1
	esac

done

echo "Create config.mk..."
write_application ${FILE}

